function(generate_py_module module_name)
  set_property(SOURCE ${module_name}.i PROPERTY CPLUSPLUS ON)
  set_property(SOURCE ${module_name}.i PROPERTY SWIG_MODULE_NAME ${module_name})
  swig_add_library(${module_name}
    TYPE MODULE
    LANGUAGE python
    OUTPUT_DIR ${PYTHON_PROJECT_DIR}
    SOURCES ${module_name}.i)
  add_library(${PROJECT_NAMESPACE}::${module_name} ALIAS ${module_name})

  target_include_directories(${module_name}
    PRIVATE
    ${PROJECT_SOURCE_DIR}/sdk/include
    ${PROJECT_SOURCE_DIR}/sdk/src
    ${Python3_INCLUDE_DIRS}
    )
  set_property(TARGET ${module_name} PROPERTY SWIG_USE_TARGET_INCLUDE_DIRECTORIES ON)

  # note: macOS is APPLE and also UNIX !
  if(APPLE)
    set_target_properties(${module_name} PROPERTIES
      SUFFIX ".so"
      INSTALL_RPATH "@loader_path;@loader_path/../../${PYTHON_PROJECT}/.libs"
      )
    set_property(TARGET ${module_name} APPEND PROPERTY
      LINK_FLAGS "-flat_namespace -undefined suppress"
      )
  elseif(UNIX)
    set_target_properties(${module_name} PROPERTIES
      INSTALL_RPATH "$ORIGIN:$ORIGIN/../${PYTHON_PROJECT}/.libs"      
      )
  endif()
  target_link_libraries(${module_name} PRIVATE ${PROJECT_NAMESPACE}::lebai-cpp)
  
  # Variable PYTHON_LIBRARIES can contains keyword `optimized`
  # which won't be interpreted inside a generator expression.
  # i.e. we can't use: $<$<PLATFORM_ID:Windows>:${PYTHON_LIBRARIES}>
  # see: https://cmake.org/cmake/help/git-stage/command/target_link_libraries.html#command:target_link_libraries
  if(MSVC)
    target_link_libraries(${module_name} PRIVATE ${Python3_LIBRARIES})
  endif()    
endfunction()

# generate_py_module(posture)
# generate_py_module(motion)
generate_py_module(robot)

# set_property(SOURCE robot.i PROPERTY CPLUSPLUS ON)
# set_property(SOURCE robot.i PROPERTY SWIG_MODULE_NAME robot)
# swig_add_library(robot
#   TYPE MODULE
#   LANGUAGE python
#   OUTPUT_DIR ${PYTHON_PROJECT_DIR}
#   SOURCES robot.i)
# add_library(${PROJECT_NAMESPACE}::robot ALIAS robot)

# target_include_directories(robot
#   PRIVATE
#   ../include
#   ${Python3_INCLUDE_DIRS}
#   )
# set_property(TARGET robot PROPERTY SWIG_USE_TARGET_INCLUDE_DIRECTORIES ON)

# # note: macOS is APPLE and also UNIX !
# if(APPLE)
#   set_target_properties(robot PROPERTIES
#     SUFFIX ".so"
#     INSTALL_RPATH "@loader_path;@loader_path/../../${PYTHON_PROJECT}/.libs"
#     )
#   set_property(TARGET robot APPEND PROPERTY
#     LINK_FLAGS "-flat_namespace -undefined suppress"
#     )
# elseif(UNIX)
#   set_target_properties(robot PROPERTIES
#     INSTALL_RPATH "$ORIGIN:$ORIGIN/../../${PYTHON_PROJECT}/.libs"
#     )
# endif()
# target_link_libraries(robot PRIVATE ${PROJECT_NAMESPACE}::lebai-sdk)

# # Variable PYTHON_LIBRARIES can contains keyword `optimized`
# # which won't be interpreted inside a generator expression.
# # i.e. we can't use: $<$<PLATFORM_ID:Windows>:${PYTHON_LIBRARIES}>
# # see: https://cmake.org/cmake/help/git-stage/command/target_link_libraries.html#command:target_link_libraries
# if(MSVC)
#   target_link_libraries(robot PRIVATE ${Python3_LIBRARIES})
# endif()

# set_property(SOURCE posture.i PROPERTY CPLUSPLUS ON)
# set_property(SOURCE posture.i PROPERTY SWIG_MODULE_NAME posture)
# swig_add_library(posture
#   TYPE MODULE
#   LANGUAGE python
#   OUTPUT_DIR ${PYTHON_PROJECT_DIR}
#   SOURCES posture.i)
# add_library(${PROJECT_NAMESPACE}::pyPosture ALIAS posture)

# target_include_directories(posture
#   PRIVATE
#   ../include
#   ${Python3_INCLUDE_DIRS}
#   )
# set_property(TARGET posture PROPERTY SWIG_USE_TARGET_INCLUDE_DIRECTORIES ON)

# # note: macOS is APPLE and also UNIX !
# if(APPLE)
#   set_target_properties(posture PROPERTIES
#     SUFFIX ".so"
#     INSTALL_RPATH "@loader_path;@loader_path/../../${PYTHON_PROJECT}/.libs"
#     )
#   set_property(TARGET posture APPEND PROPERTY
#     LINK_FLAGS "-flat_namespace -undefined suppress"
#     )
# elseif(UNIX)
#   set_target_properties(posture PROPERTIES
#     INSTALL_RPATH "$ORIGIN:$ORIGIN/../../${PYTHON_PROJECT}/.libs"
#     )
# endif()
# target_link_libraries(posture PRIVATE ${PROJECT_NAMESPACE}::lebai-sdk)

# # Variable PYTHON_LIBRARIES can contains keyword `optimized`
# # which won't be interpreted inside a generator expression.
# # i.e. we can't use: $<$<PLATFORM_ID:Windows>:${PYTHON_LIBRARIES}>
# # see: https://cmake.org/cmake/help/git-stage/command/target_link_libraries.html#command:target_link_libraries
# if(MSVC)
#   target_link_libraries(posture PRIVATE ${Python3_LIBRARIES})
# endif()


# set_property(SOURCE motion.i PROPERTY CPLUSPLUS ON)
# set_property(SOURCE motion.i PROPERTY SWIG_MODULE_NAME motion)
# swig_add_library(motion
#   TYPE MODULE
#   LANGUAGE python
#   OUTPUT_DIR ${PYTHON_PROJECT_DIR}
#   SOURCES motion.i)
# add_library(${PROJECT_NAMESPACE}::motion ALIAS motion)

# target_include_directories(motion
#   PRIVATE
#   ../include
#   ${Python3_INCLUDE_DIRS}
#   )
# set_property(TARGET motion PROPERTY SWIG_USE_TARGET_INCLUDE_DIRECTORIES ON)

# # note: macOS is APPLE and also UNIX !
# if(APPLE)
#   set_target_properties(motion PROPERTIES
#     SUFFIX ".so"
#     INSTALL_RPATH "@loader_path;@loader_path/../../${PYTHON_PROJECT}/.libs"
#     )
#   set_property(TARGET motion APPEND PROPERTY
#     LINK_FLAGS "-flat_namespace -undefined suppress"
#     )
# elseif(UNIX)
#   set_target_properties(motion PROPERTIES
#     INSTALL_RPATH "$ORIGIN:$ORIGIN/../../${PYTHON_PROJECT}/.libs"
#     )
# endif()
# target_link_libraries(motion PRIVATE ${PROJECT_NAMESPACE}::lebai-sdk)

# # Variable PYTHON_LIBRARIES can contains keyword `optimized`
# # which won't be interpreted inside a generator expression.
# # i.e. we can't use: $<$<PLATFORM_ID:Windows>:${PYTHON_LIBRARIES}>
# # see: https://cmake.org/cmake/help/git-stage/command/target_link_libraries.html#command:target_link_libraries
# if(MSVC)
#   target_link_libraries(motion PRIVATE ${Python3_LIBRARIES})
# endif()

